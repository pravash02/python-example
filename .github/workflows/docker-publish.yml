name: CI to Docker Hub

on:
  push:
    branches: [ main ]
    tags:
      - v*

jobs:

    build:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Set up Docker Buildx
          id: buildx
          uses: docker/setup-buildx-action@v1

        - name: Cache Docker layers
          uses: actions/cache@v2
          with:
            path: /tmp/.buildx-cache
            key: ${{ runner.os }}-buildx-${{ github.sha }}
            restore-keys: |
              ${{ runner.os }}-buildx-

        - uses: docker/login-action@v1 
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

        - name: Build and push
          id: docker_build
          uses: docker/build-push-action@v2
          with:
            context: .
            file: docker/Dockerfile
            builder: ${{ steps.buildx.outputs.name }}
            push: true
            tags: pravash05/python-example:latest4
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache
        - name: Image digest
          run: echo ${{ steps.docker_build.outputs.digest }}



  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  
#   push:
#     # Ensure test job passes before pushing image.
#     needs: test

#     runs-on: ubuntu-latest
#     if: github.event_name == 'push'

#     steps:
#       - uses: actions/checkout@v2

#       - name: Build image
#         run: docker build . --file Dockerfile --tag $IMAGE_NAME

#       - name: Log into registry
#         run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

#       - name: Push image
#         run: |
#           IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

#           # Change all uppercase to lowercase
#           IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

#           # Strip git ref prefix from version
#           VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

#           # Strip "v" prefix from tag name
#           [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

#           # Use Docker `latest` tag convention
#           [ "$VERSION" == "main" ] && VERSION=latest

#           echo IMAGE_ID=$IMAGE_ID
#           echo VERSION=$VERSION

#           docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
#           docker push $IMAGE_ID:$VERSION
